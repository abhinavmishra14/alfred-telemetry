plugins {
    id 'eu.xenit.docker' version '5.0.7' apply false
    id 'java'
    id 'idea'
}

subprojects {
    // Do not configure solr-common here
    if (project.name.equals("alfred-telemetry-solr-common")) {
        return;
    }

    apply plugin: 'java'
    apply from: '../dependencies.gradle'
    apply from: "${project.projectDir}/overload.gradle"
    apply plugin: 'eu.xenit.docker'

    configurations {
        // configuration that holds classes to include in the jar
        commonClasses
    }

    dependencies {
        commonClasses project(':alfred-telemetry-solr:alfred-telemetry-solr-common')
        configurations.compile.extendsFrom(configurations.commonClasses)
    }

    // can this be done better?
    jar {
        from {
            configurations.commonClasses.collect {
                include 'eu/xenit/**'
                include 'io/micrometer/**'
                include 'io/prometheus/**'
                include 'io/github/mweirauch/**'
                include 'com/codahale/**'
                zipTree(it)
            }
        }
    }

    task createDockerFile(type: eu.xenit.gradle.docker.tasks.DockerfileWithCopyTask) {
        dependsOn(jar)
        group 'docker'

        from "${solrBaseImage}"
        if ("solr4".equals(solrFlavor)) {
            smartCopy "${rootProject.projectDir}/integration-tests/src/test/resources/${solrFlavor}/solrconfig.xml", "/opt/alfresco/solr4/workspace-SpacesStore/conf/solrconfig.xml"
            smartCopy "${rootProject.projectDir}/integration-tests/src/test/resources/${solrFlavor}/solrconfig.xml", "/opt/alfresco/solr4/archive-SpacesStore/conf/solrconfig.xml"
            smartCopy "${rootProject.projectDir}/integration-tests/src/test/resources/${solrFlavor}/95-init-solr-micrometer-metrics.sh", "/docker-entrypoint.d/"
            smartCopy files(jar), "/opt/alfresco/solr4/lib/"
        } else if ("solr6".equals(solrFlavor)) {
            dependsOn(configurations.metricsGraphite)
            // overwrites existing metrics-graphite library with the one used by micrometer
            smartCopy configurations.metricsGraphite.fileCollection {
                it.group == "io.dropwizard.metrics" && it.name == "metrics-graphite"
            }, "/opt/alfresco-search-services/solr/server/lib/"
            instruction 'RUN rm -f /opt/alfresco-search-services/solr/server/lib/metrics-graphite-3.2.2.jar'

            smartCopy "${rootProject.projectDir}/integration-tests/src/test/resources/${solrFlavor}/95-init-solr-micrometer-metrics.sh", "/docker-entrypoint.d/"
            smartCopy "${rootProject.projectDir}/integration-tests/src/test/resources/${solrFlavor}/solrconfig.xml", "/opt/alfresco-search-services/solrhome/templates/rerank/conf/solrconfig.xml"
            smartCopy files(jar), "/opt/alfresco-search-services/solrhome/lib/"
        }
    }

    dockerFile {
        dockerFile = createDockerFile.getDestFile()
        dockerBuild {
            repository = "hub.xenit.eu/alfred-telemetry/solr-alfred-telemetry-${solrFlavor}"
            automaticTags = false
            tags = ["${version}"]
        }

    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact tasks.jar
            }
        }
    }
}
